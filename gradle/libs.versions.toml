[versions]
# Project
android_compile_sdk = "34"
android_min_sdk = "24"
android_target_sdk = "34"
constraintlayout = "2.1.4"
desugar_jdk_libs = "2.0.4"
fragmentKtx = "1.6.2"
glide = "4.16.0"
gson = "2.10.1"
hiltAndroid = "2.44"
kotlin = "1.9.0"
compose_bom = "2023.08.00"
android_gradle_plugin = "8.1.2"
ksp = "1.9.0-1.0.13"

# AndroidX
corektx = "1.8.0"
appcompat = "1.4.1"
lifecycle_runtime = "2.3.1"

# Compose
compose = "1.5.0"
compose_nav = "2.7.0"
compose_activity = "1.5.1"

# Retrofit
navigationFragmentKtx = "2.5.3"
navigationUiKtx = "2.5.3"
retrofit = "2.9.0"
okhttp = "5.0.0-alpha.2"

# Coroutines
coroutines = "1.7.1"

# Room
room = "2.5.1"

# Hilt
hilt = "2.47"
hilt_navigation = "1.0.0"
hilt_work = "1.0.0"
hilt_compiler = "1.0.0"

# WorkManager
workmanager = "2.8.1"

# Splash Screen
splashscreen_core = "1.0.1"

# Quality
ktlint = "11.5.0"

# Test
test_junit = "4.13.2"
truth = "1.1.4"
androidx_test_extensions = "1.1.3"
androidx_test_core = "2.1.0"
material = "1.10.0"
mockk = "1.13.4"

[libraries]

# Project
constraintlayout = { module = "androidx.constraintlayout:constraintlayout", version.ref = "constraintlayout" }
desugar_jdk_libs = { module = "com.android.tools:desugar_jdk_libs", version.ref = "desugar_jdk_libs" }
fragment-ktx = { module = "androidx.fragment:fragment-ktx", version.ref = "fragmentKtx" }
glide = { module = "com.github.bumptech.glide:glide", version.ref = "glide" }
gson = { module = "com.google.code.gson:gson", version.ref = "gson" }
kotlin_bom = { module = "org.jetbrains.kotlin:kotlin-bom", version.ref = "kotlin" }

androidx_corektx = { module = "androidx.core:core-ktx", version.ref = "corektx" }
androidx_appcompat = { module = "androidx.appcompat:appcompat", version.ref = "appcompat" }
androidx_lifecycle_runtime = { module = "androidx.lifecycle:lifecycle-runtime-ktx", version.ref = "lifecycle_runtime" }
androidx_activity_compose = { module = "androidx.activity:activity-compose", version.ref = "compose_activity" }

compose_bom = "androidx.compose:compose-bom:2023.10.00"
compose_ui = { module = "androidx.compose.ui:ui" }
compose_graphics = { module = "androidx.compose.ui:ui-graphics" }
compose_tooling_preview = { module = "androidx.compose.ui:ui-tooling-preview" }
material_3 = { module = "androidx.compose.material3:material3" }
compose_lifecycle = { module = "androidx.lifecycle:lifecycle-runtime-compose" }
compose_navigation = { module = "androidx.navigation:navigation-compose", version.ref = "compose_nav" }

# Retrofit
navigation-fragment-ktx = { module = "androidx.navigation:navigation-fragment-ktx", version.ref = "navigationFragmentKtx" }
navigation-ui-ktx = { module = "androidx.navigation:navigation-ui-ktx", version.ref = "navigationUiKtx" }
retrofit = { module = "com.squareup.retrofit2:retrofit", version.ref = "retrofit" }
retrofit_converter_gson = { module = "com.squareup.retrofit2:converter-gson", version.ref = "retrofit" }
okhttp = { module = "com.squareup.okhttp3:okhttp", version.ref = "okhttp" }
okhttp_interceptor = { module = "com.squareup.okhttp3:logging-interceptor", version.ref = "okhttp" }

# Room
room_common = { module = "androidx.room:room-common", version.ref = "room" }
room_runtime = { module = "androidx.room:room-runtime", version.ref = "room" }
room_compiler = { module = "androidx.room:room-compiler", version.ref = "room" }
room_extensions = { module = "androidx.room:room-ktx", version.ref = "room" }
androidx_room_test = { module = "androidx.room:room-testing", version.ref = "room" }

# Hilt
hilt_android = { module = "com.google.dagger:hilt-android", version.ref = "hilt" }
hilt_android_compiler = { module = "com.google.dagger:hilt-android-compiler", version.ref = "hilt" }
hilt_navigation = { module = "androidx.hilt:hilt-navigation-compose", version.ref = "hilt_navigation" }
hilt_work = { module = "androidx.hilt:hilt-work", version.ref = "hilt_work" }

# Coroutines
coroutines_core = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref = "coroutines" }
coroutines_test = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-test", version.ref = "coroutines" }

# WorkManager
workmanager = { module = "androidx.work:work-runtime-ktx", version.ref = "workmanager" }

# Splash Screen
splashscreen_core = { module = "androidx.core:core-splashscreen", version.ref = "splashscreen_core" }

# General dependencies
kotlin_immutable_collections = { module = "org.jetbrains.kotlinx:kotlinx-collections-immutable", version = "0.3.5" }
androidx_annotations = { module = "androidx.annotation:annotation", version = "1.6.0" }
java_inject = { module = "javax.inject:javax.inject", version = "1" }

build_agp = { module = "com.android.tools.build:gradle", version.ref = "android_gradle_plugin" }
build_kotlin = { module = "org.jetbrains.kotlin:kotlin-gradle-plugin", version.ref = "kotlin" }

# Test
test_junit = { module = "junit:junit", version.ref = "test_junit" }
androidx_test_extensions = { module = "androidx.test.ext:junit", version.ref = "androidx_test_extensions" }
androidx_expresso_core = { module = "androidx.test.espresso:espresso-core", version = "3.4.0" }
google_truth = { module = "com.google.truth:truth", version.ref = "truth" }
androidx_test_core = { module = "androidx.arch.core:core-testing", version.ref = "androidx_test_core" }
material = { group = "com.google.android.material", name = "material", version.ref = "material" }
mockk = { module = "io.mockk:mockk", version.ref = "mockk" }

[plugins]

android_application = { id = "com.android.application", version.ref = "android_gradle_plugin" }
kotlin_android = { id = "org.jetbrains.kotlin.android", version.ref = "kotlin" }
kotlin_jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
ktlint = { id = "org.jlleitschuh.gradle.ktlint", version.ref = "ktlint" }
kotlin_kapt = { id = "org.jetbrains.kotlin.kapt", version.ref = "kotlin" }
hilt = { id = "com.google.dagger.hilt.android", version.ref = "hilt" }
ksp = { id = "com.google.devtools.ksp", version.ref = "ksp" }
kapt = { id = "org.jetbrains.kotlin.kapt", version.ref = "kotlin" }
android_library = { id = "com.android.library", version.ref = "android_gradle_plugin" }


[bundles]
room = ["room_runtime", "room_extensions"]
retrofit = ["retrofit","gson","retrofit_converter_gson", "okhttp", "okhttp_interceptor"]
